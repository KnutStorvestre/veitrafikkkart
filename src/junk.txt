export const getUserDecima = functions.https.onRequest((req, res) => {
 const promise = admin.firestore().doc('users/Decima').get()
 const p2 = promise.then(snapshot => {
  const data = snapshot.data();
  res.send(data)
     });
 p2.catch(error => {
  console.log(error)
  res.status(500).send(error)
 })
});


    <div className="App">
      <header className="App-header">
        <p>HEllo</p>
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>



export const getUsers = functions.https.onRequest((req, res) => {
 admin.firestore().collection('users').get()
     .then((data => {
      let scream:any = [];
      data.forEach((doc) => {
       scream.push(doc.data())
      });
      return res.json(scream)
     }))
     .catch((err) => console.log(err))
});

export const getUserDecima = functions.https.onRequest((req, res) => {
 admin.firestore().doc('users/Decima').get()
 .then(snapshot => {
  const data = snapshot.data();
  res.send(data)
     })
 .catch(error => {
  console.log(error);
  res.status(500).send(error)
 })
});


//denne filen har ingen funksjon
let db = {
    screams: [
        {
            userHandle: 'user',
            body: 'this is the scream body',
            createdAt: '2020-03-24T18:31:00.421Z',
            likeCount: 5,
            commentCount: 2
        }
    ]
}


exports.createNewUser = functions.https.onRequest((req, res:any | undefined) => {
    if (req.method !== 'POST')
        return res.status(400).json({error: 'MMM'});

    const newUser = {
        first: req.body.body,
        time: admin.firestore.Timestamp.fromDate(new Date())
    };

    db
        .collection('users')
        .add(newUser)
        .then(doc => {
            res.json({ message: `document ${doc.id} created successfully`});
        })
        .catch((err) => {
            res.status(500).json({ error: 'something went wrong'});
            console.error(err)
        })
});

/*  Firebase Functions messes with your request and will wreck your day because none of the
 *  traditional upload handlers with Express will work.
 *
 *  Credit: https://stackoverflow.com/questions/47242340/how-to-perform-an-http-file-upload-using-express-on-cloud-functions-for-firebase
 */
/*
const Busboy = require('busboy');

const allowedMethods: string[] = ['POST', 'PUT'];

export class FileUpload {
    public fileName: string;
    public encoding: string;
    public mimeType: string;
    protected buffer: Buffer;

    constructor(opts: any) {
        this.fileName = opts.fileName;
        this.encoding = opts.encoding;
        this.mimeType = opts.mimeType;
        this.buffer = new Buffer('');
    }

    public appendData(data: any) {
        this.buffer = Buffer.concat([this.buffer, data]);
    }

    public getBuffer(): Buffer {
        return this.buffer;
    }

    public getBytes(): number {
        return this.buffer.byteLength;
    }
}

export const fileParser = function (req, res, next) {
    if (
        allowedMethods.includes(req.method) && req.rawBody &&
        req.headers['content-type'].startsWith('multipart/form-data')
    ) {
        const busboy = new Busboy({ headers: req.headers });
        // Placeholder
        let files: { [fieldName: string]: FileUpload } = {};
        req.body = {};
        // This callback will be invoked for each file uploaded
        busboy.on('file', (fieldName, file, fileName, encoding, mimeType) => {
            // Note that os.tmpdir() is an in-memory file system, so should only
            // be used for files small enough to fit in memory.
            files[fieldName] = new FileUpload({
                fileName: fileName,
                encoding: encoding,
                mimeType: mimeType
            });
            file.on('data', (data) => {
                files[fieldName].appendData(data);
            });
        });
        busboy.on('field', (fieldName, value) => {
            req.body[fieldName] = value;
        });
        // This callback will be invoked after all uploaded files are saved.
        busboy.on('finish', () => {
            req.files = files;
            next();
        });
        // The raw bytes of the upload will be in req.rawBody.  Send it to busboy, and get
        // a callback when it's finished.
        busboy.end(req.rawBody);
    } else {
        next();
    }
};*/